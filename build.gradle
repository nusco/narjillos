plugins {
    id 'application'

    // Also applies the following plugins
    // - com.google.osdetector
    // - org.javamodularity.moduleplugin
    id 'org.openjfx.javafxplugin' version '0.0.11-SNAPSHOT'     // needed for M1 Mac support
}

version = '1.0'

group = 'com.example.javamod'

version = '0.8.1'

group = 'org.nusco.narjillos'

sourceCompatibility = JavaVersion.VERSION_17

ext {
    junitVersion = '5.8.2'
}

application {
    mainModule = 'org.nusco.narjillos'
    mainClass = 'org.nusco.narjillos.application.NarjillosRunner'
}

javafx {
    // The correct jars are automatically added everywhere they are needed
    // 17.0.1 should support M1 Macs
    version = '17.0.1'
    modules = [ 'javafx.controls' ]
}

// Dependencies

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'commons-cli:commons-cli:1.5.0'
    implementation 'org.yaml:snakeyaml:1.30'
    implementation 'org.xerial:sqlite-jdbc:3.36.0.2'

    // Test
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    // testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"     // optional
    testImplementation 'org.assertj:assertj-core:3.22.0'
    testImplementation 'org.mockito:mockito-core:4.2.0'

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

// Tests

test {
    description "Runs standard suite of unit tests."
    useJUnitPlatform()
    maxHeapSize = "2g"
    filter {
        excludeTestsMatching '*PerformanceTest'
        excludeTestsMatching '*DeterministicExperimentTest'
    }
    testLogging {
        showStandardStreams = true
        events 'FAILED', 'SKIPPED'
    }
}





/*

// Programs

createProgramTask('narjillos', 'org.nusco.narjillos.application.NarjillosRunner', 'Runs Narjillos (same arguments as the \'narjillos\' script).')
createProgramTask('dnabrowser', 'org.nusco.narjillos.application.DNABrowserRunner', 'Runs the DNA Browser (pass it the *.germline filename).')
createProgramTask('lab', 'org.nusco.narjillos.Lab', 'Runs lab analysis (pass it the *.exp filename).')

task(testPerformance, dependsOn: 'compileJava', type: JavaExec) {
    description = 'Runs performance test.'
    group = 'verification'
    mainClass = 'org.nusco.narjillos.PerformanceTest'
    classpath = sourceSets.test.runtimeClasspath
}

task(testDeterministic, dependsOn: 'compileJava', type: JavaExec) {
    description = 'Runs the (slow) test that checks whether the system is deterministic.'
    group = 'verification'
    mainClass = 'org.nusco.narjillos.DeterministicExperimentTest'
    classpath = sourceSets.test.runtimeClasspath
}

task testAll(dependsOn: ['test', 'testDeterministic', 'testPerformance']) {
    description = 'Runs all the tests, including the slow tests, the database tests and the performance tests.'
    group = 'verification'
}

// Backlog Management
=======

*/
