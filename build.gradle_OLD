// Plugins

plugins {
    id 'java'
    id 'application'     // also loads the 'distribution' plugin
    id 'eclipse'
    id 'idea'
    id 'org.openjfx.javafxplugin' version '0.0.10'
}

// Basic Configuration

sourceCompatibility = JavaVersion.VERSION_17

application {
    mainClass = 'org.nusco.narjillos.application.NarjillosRunner'
}

javafx {
    sdk = 'javafx-sdk-17.0.1'
    modules = [ 'javafx.controls' ]
}

// Temporarily remove Maven JavaFX to replace it with my Mac M1-compatible
// local version. I'll revert to a cross-platform configuration as I upgrade.
//javafx {
//    version = "12.0.1"
//    modules = [ 'javafx.controls' ]
//}

// Dependencies

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'commons-cli:commons-cli:1.5.0'
    implementation 'org.yaml:snakeyaml:1.29'
    implementation 'org.xerial:sqlite-jdbc:3.36.0.2'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.1.0'
}

// Programs

createProgramTask('narjillos', 'org.nusco.narjillos.application.NarjillosRunner', 'Runs Narjillos (same arguments as the \'narjillos\' script).')
createProgramTask('dnabrowser', 'org.nusco.narjillos.application.DNABrowserRunner', 'Runs the DNA Browser (pass it the *.germline filename).')
createProgramTask('lab', 'org.nusco.narjillos.Lab', 'Runs lab analysis (pass it the *.exp filename).')

// Tests

test {
    description "Runs standard suite of unit tests."
    include '**/*Test*'
    exclude '**/*PerformanceTest*'
    exclude '**/*DeterministicExperimentTest*'
    testLogging.showStandardStreams = true
}

task(testPerformance, dependsOn: 'compileJava', type: JavaExec) {
    description = 'Runs performance test.'
    group = 'verification'
    mainClass = 'org.nusco.narjillos.PerformanceTest'
    classpath = sourceSets.test.runtimeClasspath
}

task(testDeterministic, dependsOn: 'compileJava', type: JavaExec) {
    description = 'Runs the (slow) test that checks whether the system is deterministic.'
    group = 'verification'
    mainClass = 'org.nusco.narjillos.DeterministicExperimentTest'
    classpath = sourceSets.test.runtimeClasspath
}

task testAll(dependsOn: ['test', 'testDeterministic', 'testPerformance']) {
    description = 'Runs all the tests, including the slow tests, the database tests and the performance tests.'
    group = 'verification'
}

// Backlog Management

task(bl, dependsOn: 'build', type: JavaExec) {
    mainClass = 'org.nusco.narjillos.application.Backlog'
    classpath = sourceSets.main.runtimeClasspath
    args commandLineArgsOr('all')
}

task(backlog, dependsOn: 'bl') {
    description = 'Prints the top of the backlog. Also aliased to \'bl\'.'
    group = 'development'
}

// Packaging

// TODO: remove these once the issue with duplicatesStrategy has been fixed
// (see: https://github.com/gradle/gradle/issues/17236)
tasks.named('distTar') { duplicatesStrategy = 'include' }
tasks.named('distZip') { duplicatesStrategy = 'include' }
tasks.named('installDist') { duplicatesStrategy = 'include' }
// END TODO

applicationDistribution.from(
  files(
    'version',
    'LICENSE',
    'README.md',
    'config.yaml'
  )
)

task writeDockerfile() {
    description = 'Generates a new Dockerfile for the current version.'
    def dockerfile = new File('Dockerfile')
    dockerfile.write ""
    dockerfile << "FROM java\n"
    dockerfile << "MAINTAINER Paolo \"Nusco\" Perrotta <paolo.nusco.perrotta@gmail.com>\n\n"
    dockerfile << "RUN wget https://github.com/nusco/narjillos/releases/download/v0.8.1/narjillos.zip -O narjillos.zip && unzip -o narjillos.zip && rm narjillos.zip\n"
    dockerfile << "WORKDIR narjillos\n"
    dockerfile << "CMD sh narjillos -f -s\n"
}

task createStartupScripts(dependsOn: 'installDist') {
    createScript('lab', 'org.nusco.narjillos.Lab')
    createScript('dnabrowser', 'org.nusco.narjillos.application.DNABrowserRunner')
}

task release(dependsOn: ['writeDockerfile', 'testAll', 'createStartupScripts', 'assemble']) {
    description = 'Runs all tests and packages a release.'
    group = 'distribution'
}

// Helpers

def createProgramTask(taskName, mainClassName, taskDescription) {
    tasks.create(name: taskName, type: JavaExec) {
        description = taskDescription
        group = 'programs'
        mainClass = mainClassName
        classpath = sourceSets.main.runtimeClasspath
        args commandLineArgsOr([])
    }
}

def commandLineArgsOr(defaultArgs) {
    if (project.hasProperty('args') && project.getProperty('args').trim().length() > 0)
        return project.args.split('\\s+')
    else
        return defaultArgs
}

def createScript(name, mainClassName) {
    def taskName = name + 'StartScript'
    tasks.create(name: taskName, type: CreateStartScripts) {
        outputDir = new File(buildDir, 'scripts')
        mainClass = mainClassName
        applicationName = name
        classpath = tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + configurations.runtimeClasspath
    }

    tasks[taskName].dependsOn(project.jar)

    applicationDistribution.with {
        into('bin/') {
            from(tasks[taskName])
            fileMode = 0755
        }
    }
}
